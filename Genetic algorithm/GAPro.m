tic
clear
clc
%% 初始数据
scenario = 1;
global select_obj
select_obj = 1;%1:total time ; 2: punish
%%%%%%%S1%%%%%%%%%%%%%%%
if scenario==1
    x=[50,89,25.3100000000000,84.5800000000000,12.5900000000000,63.8600000000000,94.8500000000000,78.8000000000000,61.0100000000000,57.0800000000000,0.560000000000000,60.3200000000000,24.8200000000000,30.8200000000000,70.3100000000000,49.4100000000000,96.7200000000000,5.15000000000000,92.7100000000000,26.6300000000000,34.9700];
    y=[50,64.3900000000000,47.3500000000000,78.7600000000000,0.820000000000000,14.7500000000000,68.5700000000000,54.0100000000000,54.5700000000000,48.2700000000000,10.9200000000000,56.6400000000000,34.7900000000000,82.3000000000000,47.5800000000000,97.9600000000000,6.26000000000000,22,56.9900000000000,29.4300000000000,50.2200];
end
%%%%%%%S2%%%%%%%%%%%%%%%
if scenario==2
x=[50,43.8700000000000,38.1500000000000,76.5500000000000,79.5100000000000,18.6800000000000,48.9700000000000,44.5500000000000,64.6300000000000,70.9300000000000,75.4600000000000,27.6000000000000,67.9700000000000,65.5000000000000,16.2600000000000,11.8900000000000,49.8300000000000,95.9700000000000,34.0300000000000,58.5200000000000,22.3800000000000,75.1200000000000,25.5000000000000,50.5900000000000,69.9000000000000,89.0900000000000,95.9200000000000,54.7200000000000,13.8600000000000,14.9200000000000,25.7500000000000,84.0700000000000,25.4200000000000,81.4200000000000,24.3500000000000,92.9200000000000,34.9900000000000,19.6500000000000,25.1000000000000,61.6000000000000,47.3200000000000];
y=[50,80.1500000000000,22.4800000000000,20.8000000000000,43.6000000000000,31.4500000000000,94.7100000000000,12.9600000000000,24.5600000000000,40.6300000000000,28.7300000000000,11.4000000000000,60.0600000000000,66.3800000000000,78.5300000000000,59.1400000000000,10.3000000000000,83.4000000000000,33.3200000000000,36.7800000000000,24.0400000000000,32.9300000000000,6.33000000000000,2.05000000000000,19.4700000000000,36.4100000000000,55.3100000000000,83.2700000000000,47.9400000000000,30.3000000000000,94.5700000000000,26.3300000000000,14.7300000000000,81.4000000000000,83.7800000000000,47.4200000000000,96.7900000000000,77.4900000000000,32.6500000000000,65.2000000000000,41.8800000000000];
end
%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%S3%%%%%%%%%
if scenario==3
x=[100,28.8200000000000,152.200000000000,101,183.980000000000,83.2400000000000,180.100000000000,108.940000000000,161.700000000000,8.80000000000000,164.320000000000,89.2800000000000,31.9600000000000,125.420000000000,62.5800000000000,84.1600000000000,1.12000000000000,124.960000000000,177.500000000000,164.200000000000,49.9600000000000,82.1000000000000,100.040000000000,115.780000000000,154.700000000000,29.3200000000000,173.500000000000,10.6000000000000,94.0200000000000,19.8200000000000,149.040000000000,56.7400000000000,83.6600000000000,15.2000000000000,110.920000000000,24.9000000000000,46.1200000000000,7.90000000000000,150.360000000000,153.460000000000,1.90000000000000,170.080000000000,94.8200000000000,95.8000000000000,48.6200000000000,63.3200000000000,7.48000000000000,83,6.52000000000000,52.8000000000000,14.3600000000000,168.400000000000,62.3200000000000,87.7800000000000,76.2400000000000,140.740000000000,65.4400000000000,194.260000000000,161.320000000000,1.10000000000000,196.500000000000];
y=[100,157.420000000000,197.300000000000,175.900000000000,14.9800000000000,125.120000000000,179.860000000000,47.1800000000000,136,113.260000000000,126.540000000000,119.840000000000,3.58000000000000,143.500000000000,127.560000000000,53.1600000000000,183.720000000000,109.220000000000,87.5800000000000,180.760000000000,140.840000000000,36.0800000000000,10.3800000000000,62.2400000000000,99.9600000000000,191.600000000000,133.560000000000,91.5200000000000,182.480000000000,11.4200000000000,99.7200000000000,56.0800000000000,52.5200000000000,6.20000000000000,153.860000000000,75.9200000000000,152.120000000000,112.060000000000,46.9400000000000,174.600000000000,192.340000000000,140.900000000000,5.80000000000000,1.56000000000000,121.040000000000,5.82000000000000,92.2800000000000,141.680000000000,12.2600000000000,186.280000000000,96.4600000000000,111.340000000000,168.060000000000,3.18000000000000,190.780000000000,27.4200000000000,128.200000000000,85.4400000000000,125.440000000000,51.6600000000000,149.400000000000];
end
%%%%%%%%%%%%%%%%%%
%%%%%%%S4%%%%%%%%%
if scenario==4
x=[100,114.060000000000,113.340000000000,78.6200000000000,41.8800000000000,173.260000000000,185.960000000000,4.98000000000000,139.560000000000,117.280000000000,137.980000000000,2.84000000000000,41.5000000000000,170.680000000000,57.4400000000000,86.6000000000000,111.200000000000,58.9600000000000,89.4400000000000,192.280000000000,159.420000000000,117.820000000000,127.980000000000,0.820000000000000,32.1200000000000,146.180000000000,73.9800000000000,128.700000000000,49.1000000000000,17.8200000000000,58.6600000000000,150.900000000000,137.820000000000,47.8200000000000,76.3800000000000,128.240000000000,33.8600000000000,16.7200000000000,0.260000000000000,135.200000000000,20.8400000000000,192.980000000000,136.120000000000,55,105.600000000000,46.5200000000000,171.720000000000,11.8600000000000,128.300000000000,58.4000000000000,142.980000000000,186.040000000000,7.34000000000000,16.0200000000000,99.6800000000000,143.040000000000,49.6800000000000,150.400000000000,146.280000000000,124.600000000000,67.8200000000000,9.18000000000000,39.1800000000000,18.2800000000000,123.660000000000,157.540000000000,110.800000000000,134.300000000000,146.800000000000,118.320000000000,82.9600000000000,122.820000000000,81.0600000000000,81.8200000000000,128.420000000000,147.140000000000,27.3600000000000,114.840000000000,6.60000000000000,124.100000000000,122.780000000000];
y=[100,137.600000000000,1.38000000000000,193.520000000000,55.4800000000000,165.080000000000,134.780000000000,12.7200000000000,141.660000000000,86.3000000000000,147.040000000000,98.4000000000000,72.8400000000000,130.160000000000,191.800000000000,174.820000000000,69.2800000000000,159.520000000000,184.460000000000,10.7000000000000,150.200000000000,126.820000000000,36.7400000000000,195.240000000000,195.220000000000,40.7800000000000,164.220000000000,117.560000000000,35.9000000000000,157.180000000000,116,145.160000000000,128.680000000000,22.9400000000000,61.2200000000000,27.5800000000000,7.62000000000000,193.840000000000,114.080000000000,157.880000000000,59.0600000000000,28.5000000000000,99.7800000000000,154.560000000000,181.660000000000,169.360000000000,160.800000000000,172.120000000000,32.1200000000000,166.180000000000,141.720000000000,76.4200000000000,89.3400000000000,131.180000000000,193.920000000000,118.160000000000,158.400000000000,54.1400000000000,19.2600000000000,23.7000000000000,64.6000000000000,46.2000000000000,5.88000000000000,152.060000000000,141.440000000000,17.2200000000000,151.080000000000,104.300000000000,17.7200000000000,94.7800000000000,180.960000000000,178,155.060000000000,59.1200000000000,53.8400000000000,82.4200000000000,150.140000000000,13.9200000000000,11.2400000000000,117.460000000000,89.8400000000000];
end
%%%%%%%%%%%%%%%%%%
% xx=randi([0,9999],1,80)/50;
% yy=randi([0,9999],1,20)/100;
% figure(1);
vertexs=[x;y]';
global n perPower
perPower = 10;                  %每小时耗电量18
velocity = 80;                  %机器人速度
n=length(x);                    %城市数目
h=pdist(vertexs);
dist=squareform(h);             %距离矩阵
Time_matrix = dist/velocity;
Power_matrix=Time_matrix*perPower;
%% Init task points
global  nt
TaskList = cell(1,n);
nt=length(TaskList);                    %任务点数目
for i = 1:nt
TaskList{1,i} = cell(3,1);%时间窗，时长，协同车数
end
%%%%%%%%% s1：20个任务点%%%%%%%%%%%%%%
% %1
% TaskList{1,1}{1,1} = [0,100];
% TaskList{1,1}{2,1} = 0;
% TaskList{1,1}{3,1} = 0;
% %2
% TaskList{1,2}{1,1} = [4,10];
% TaskList{1,2}{2,1} = 2;
% TaskList{1,2}{3,1} = 2;
% %3
% TaskList{1,3}{1,1} = [0,100];
% TaskList{1,3}{2,1} = 2.5;
% TaskList{1,3}{3,1} = 2;
% %4
% TaskList{1,4}{1,1} = [0,100];
% TaskList{1,4}{2,1} = 2.2;
% TaskList{1,4}{3,1} = 2;
% %5
% TaskList{1,5}{1,1} = [0,100];
% TaskList{1,5}{2,1} = 1.2;
% TaskList{1,5}{3,1} = 3;
% %6
% TaskList{1,6}{1,1} = [0,100];
% TaskList{1,6}{2,1} = 1.5;
% TaskList{1,6}{3,1} = 3;
% %7
% TaskList{1,7}{1,1} = [0,100];
% TaskList{1,7}{2,1} = 0.8;
% TaskList{1,7}{3,1} = 1;
% %8
% TaskList{1,8}{1,1} = [0,100];
% TaskList{1,8}{2,1} = 1;
% TaskList{1,8}{3,1} = 1;
% %9
% TaskList{1,9}{1,1} = [0,100];
% TaskList{1,9}{2,1} = 1;
% TaskList{1,9}{3,1} = 1;
% %10
% TaskList{1,10}{1,1} = [0,100];
% TaskList{1,10}{2,1} = 1.5;
% TaskList{1,10}{3,1} = 1;
% %11
% TaskList{1,11}{1,1} = [0,4];
% TaskList{1,11}{2,1} = 1.2;
% TaskList{1,11}{3,1} = 1;
% %12
% TaskList{1,12}{1,1} = [4,10];
% TaskList{1,12}{2,1} = 1.3;
% TaskList{1,12}{3,1} = 1;
% %13
% TaskList{1,13}{1,1} = [10,14];
% TaskList{1,13}{2,1} = 0.8;
% TaskList{1,13}{3,1} = 1;
% %14
% TaskList{1,14}{1,1} = [4,10];
% TaskList{1,14}{2,1} = 1.8;
% TaskList{1,14}{3,1} = 1;
% %15
% TaskList{1,15}{1,1} = [0,100];
% TaskList{1,15}{2,1} = 0.5;
% TaskList{1,15}{3,1} = 1;
% %16
% TaskList{1,16}{1,1} = [0,100];
% TaskList{1,16}{2,1} = 1;
% TaskList{1,16}{3,1} = 1;
% %17
% TaskList{1,17}{1,1} = [0,100];
% TaskList{1,17}{2,1} = 1.5;
% TaskList{1,17}{3,1} = 1;
% %18
% TaskList{1,18}{1,1} = [0,100];
% TaskList{1,18}{2,1} = 1.2;
% TaskList{1,18}{3,1} = 1;
% %19
% TaskList{1,19}{1,1} = [0,100];
% TaskList{1,19}{2,1} = 0.8;
% TaskList{1,19}{3,1} = 1;
% %20
% TaskList{1,20}{1,1} = [0,100];
% TaskList{1,20}{2,1} = 1.8;
% TaskList{1,20}{3,1} = 1;
% %21
% TaskList{1,21}{1,1} = [0,100];
% TaskList{1,21}{2,1} = 1.3;
% TaskList{1,21}{3,1} = 1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%S2:40 Tasks%%%%%%%%%%%%%%%%%%%%%%%%%
for i=1:n
    TaskList{1,i}{1,1} = [0,1000];
end
winInd=randperm(nt-1,15)+1;
for i=1:5
    TaskList{1,winInd(i)}{1,1} = [0,6];
end
for i=6:10
    TaskList{1,winInd(i)}{1,1} = [6,12];
end
for i=11:15
    TaskList{1,winInd(i)}{1,1} = [12,18];
end

% RandTime=zeros(1,40);
% for i=1:40
%     while 1
%         randtime=normrnd(2,1);
%         if randtime>0.5&&randtime<3.5
%             break;
%         end
%     end
%     RandTime(i)=randtime;
% end
RandTime=[3.26065870912090,2.66014314104698,1.93213444645731,1.80477880210125,1.78239364985681,1.69689237864826,2.02304562442511,2.05129035584877,2.82606279021160,2.46691443568470,1.79028666161126,2.62519035708763,2.18322726300144,0.970232456433379,2.94922183113102,2.30706191914670,2.13517494209946,2.51524633552485,2.26140632405538,1.05851422904457,1.83766232719617,1.85394536566847,1.46798862319118,1.12427065383998,1.51618494988988,1.28799545097258,0.825787668543184,1.80776048246073,1.72592977006740,1.75097525748629,0.935786587110673,3.23467914689078,1.77037354903682,1.55537218355301,1.84405896427523,2.27606825393154,1.73883635422352,2.44342191290409,2.39189420943245,0.749321093173593];
RandTime=fix(RandTime*100);
RandTime=RandTime/100;
TaskList{1,1}{2,1} = 0;
for i=2:n
    TaskList{1,i}{2,1} = RandTime(i-1);
end

TaskList{1,1}{3,1} = 0;
for i=2:n
    TaskList{1,i}{3,1} = 1;
end
for i=2:6
    TaskList{1,i}{3,1} = 2;
end
for i=7:8
    TaskList{1,i}{3,1} = 3;
end
for i=9:10
    TaskList{1,i}{3,1} = 4;
end
TaskList{1,11}{3,1} = 5;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% %%%%%%%%%S3:60 Tasks%%%%%%%%%%%%%%%%%%%%%%%%%
% for i=1:n
%     TaskList{1,i}{1,1} = [0,1000];
% end
% winInd=randperm(nt-1,18)+1;
% for i=1:6
%     TaskList{1,winInd(i)}{1,1} = [0,8];
% end
% for i=7:12
%     TaskList{1,winInd(i)}{1,1} = [8,15];
% end
% for i=13:18
%     TaskList{1,winInd(i)}{1,1} = [15,20];
% end
% 
% % RandTime=zeros(1,60);
% % for i=1:60
% %     while 1
% %         randtime=normrnd(2,1);
% %         if randtime>0.5&&randtime<3.5
% %             break;
% %         end
% %     end
% %     RandTime(i)=randtime;
% % end
% RandTime=[2.13830237501720,2.35748161428958,2.16089362127403,0.894348027674982,2.40269888056268,1.16009822044423,1.64997259418897,2.50248360289473,2.63383675474299,1.31019358245461,2.23007677980344,1.75530992952249,1.96948572914348,0.946830087459766,0.636296036915430,2.09788114918174,1.70129589569593,1.27694808114953,1.64183502611117,1.84167159998049,2.22673570279926,2.01596861191993,1.71500107108841,3.06231181524322,1.71140911015736,2.67276698069662,2.26795717795830,3.13583540936672,0.902616935729296,2.17335260466587,3.06584347030525,1.71715373120482,1.14737534976806,2.03336179736702,0.668863816961971,2.61251748457240,2.06625214016552,1.32854005080796,2.47287386585678,2.41450610589288,1.33275593434012,2.30549999566104,2.97267257487803,2.90588701386448,2.28840368807839,0.639723927605868,3.00325466773278,1.27556703397104,1.11365621027942,2.28652085932070,1.45842347552776,1.97145804505479,0.875002267817377,1.99481068970204,2.27605936602640,1.40733149414262,2.45102890591355,1.18407465256989,2.21470932791624,2.45257690032169];
% RandTime=fix(RandTime*100);
% RandTime=RandTime/100;
% TaskList{1,1}{2,1} = 0;
% for i=2:n
%     TaskList{1,i}{2,1} = RandTime(i-1);
% end
% 
% TaskList{1,1}{3,1} = 0;
% for i=2:n
%     TaskList{1,i}{3,1} = 1;
% end
% for i=2:6
%     TaskList{1,i}{3,1} = 2;
% end
% for i=7:10
%     TaskList{1,i}{3,1} = 3;
% end
% for i=11:12
%     TaskList{1,i}{3,1} = 4;
% end
% for i=13:14
%     TaskList{1,i}{3,1} = 5;
% end
% TaskList{1,15}{3,1} = 6;
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%S4:80 Tasks%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for i=1:n
%     TaskList{1,i}{1,1} = [0,1000];
% end
% winInd=randperm(nt-1,21)+1;
% for i=1:7
%     TaskList{1,winInd(i)}{1,1} = [0,10];
% end
% for i=8:14
%     TaskList{1,winInd(i)}{1,1} = [10,20];
% end
% for i=15:21
%     TaskList{1,winInd(i)}{1,1} = [15,25];
% end
% 
% % RandTime=zeros(1,n);
% % for i=1:n
% %     while 1
% %         randtime=normrnd(2,1);
% %         if randtime>0.5&&randtime<3.5
% %             break;
% %         end
% %     end
% %     RandTime(i)=randtime;
% % end
% RandTime=[0.888157002482887;2.55678821506502;2.48210782673557;2.53338607892431;2.59019218646725;1.94409794157997;0.581329222011908;3.28915976419686;1.86483350590061;1.20880519539886;2.49837882142203;2.01279557154166;1.49812218453675;2.95033263599520;3.07318482320709;0.920277277781511;1.90351653083996;1.63862369395317;2.36086613849948;1.62336273749354;2.25824825140728;2.36060515573460;3.14819491100860;1.31478789302985;2.04322734129385;2.33636047535093;0.532023987840369;0.796918166170894;1.61938802420968;1.61800631744637;1.55674611503605;0.949528407477085;2.46801075042047;1.93412184317748;1.07567421013687;2.54791674769024;3.04815780892403;1.41804881173055;2.38708271401795;1.77410825916827;2.37979631993729;1.48270058589585;1.05259797390929;0.926557694904911;1.38631275371553;1.95509023578027;3.48006137461434;2.74108902147304;0.931896055114427;2.58789128698058;2.35711376217579;1.80690694757144;1.59651304538278;2.85002879691865;1.88845761170340;2.34736581307902;2.27234212544379;3.25724565345575;2.88674522077670;2.77283282383159;2.98406961032277;1.28071219423214;1.61904482758745;0.960902555763388;1.49229902929333;2.32925562162080;1.59562699870957;2.32806294646848;1.97629641446345;0.894979802442701;1.33280775359978;3.08801665528747;1.74772151566915;2.01821550359018;2.54051712141489;1.67814220543251;2.11943988336875;1.01466641071057;3.40280904968316;2.51372674712677];
% RandTime=fix(RandTime*100);
% RandTime=RandTime/100;
% TaskList{1,1}{2,1} = 0;
% for i=2:n
%     TaskList{1,i}{2,1} = RandTime(i-1);
% end
% 
% TaskList{1,1}{3,1} = 0;
% for i=2:n
%     TaskList{1,i}{3,1} = 1;
% end
% for i=2:9
%     TaskList{1,i}{3,1} = 2;
% end
% for i=10:12
%     TaskList{1,i}{3,1} = 3;
% end
% for i=13:15
%     TaskList{1,i}{3,1} = 4;
% end
% for i=16:17
%     TaskList{1,i}{3,1} = 5;
% end
% for i=18:19
%     TaskList{1,i}{3,1} = 6;
% end
% TaskList{1,20}{3,1} = 7;
% TaskList{1,21}{3,1} = 8;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

index_coo = [];%合作任务的任务序号
num_coo = [];%合作任务所需车数
% num_coo1 = [];
% kind_coo = [];%合作任务的种类：0接续/1合作
for k = 1:nt
    if TaskList{1,k}{3,1}>1
        index_coo = [index_coo,k];
        num_coo = [num_coo,TaskList{1,k}{3,1}];
    end
%     if TaskList{1,k}{7,1}>1&&TaskList{1,k}{8,1}==1
%         num_coo1=[num_coo1,TaskList{1,k}{7,1}];
%     end
%     kind_coo = [kind_coo,TaskList{1,k}{8,1}];
end
nt_coo = length(index_coo);%合作任务数
% index_coo=find(kind_coo==1);%合作协同任务

Timecost = zeros(1,nt);
for i = 1:nt
    Timecost(i) = TaskList{1,i}{2,1};
    Powercost = perPower*Timecost;
end

TimeWin = zeros(nt,2);
for i=1:nt
    TimeWin(i,:)=TaskList{1,i}{1,1};
end

%% Init Parameters
global NUM N NR Tch Cs Ce 
NUM=600;                        %种群大小
NR=8;                           %机器人数量
MAXGEN=300;                     %迭代次数
Pc1=0.8;                        %交叉概率1
Pc2=0.9;                       %当交叉个体适应度较低时采用较大的交叉概率
Pm1=0.1;                       %变异概率1
Pm2=0.15;                       %当个体适应度较低时采用较大的变异概率
Pm3=0.2;                       %大变异概率
alfa=0.5;                       %密集因子
Nlm=600;                       %大变异迭代次数阈值
pSwap=0.1;                      %选择交换结构的概率
pReversion=0.3;                 %选择逆转结构的概率
pInsertion=1-pSwap-pReversion;  %选择插入结构的概率
N=nt+NR-2+sum(num_coo)-nt_coo;  %染色体长度=城市数目+机器人数目-2+合作任务点的重复次数
Tch = 0.02;                     %每1格电充电时间，共100格
Cs = 0.5;                       %早到惩罚系数
Ce = 0.2;                       %延迟惩罚系数
itermax_const=100;
%% Init Population
pop=InitPop_coo(NUM,index_coo,index_coo,num_coo,num_coo);
%% Iteration
%初始全局最优个体
bestIndividual=pop(1,:); 
[best_Obj,best_partRoute]=ObjFunction_coo(bestIndividual,Time_matrix,Power_matrix,Timecost,Powercost,index_coo,num_coo,TimeWin);       %初始全局最优个体的目标函数值
bestFitvalue=Fitness(best_Obj);                  %初始全局最优个体的适应度值
BestPop=zeros(MAXGEN,N);                         %记录每次迭代过程中全局最优个体
% BestTmax=zeros(MAXGEN,1);                        %记录每次迭代过程中全局最优个体的总时间
for iter=1:MAXGEN
    tic
    %不可行修复
    pop=Repair(pop,index_coo,num_coo);
    %局部搜索
%     pop=FindNeighbor(pop,Time_matrix,Power_matrix,Timecost,Powercost,index_coo,num_coo,TimeWin);
    %计算新种群每个个体的目标值
    [Obj,~]=ObjFunction_coo(pop,Time_matrix,Power_matrix,Timecost,Powercost,index_coo,num_coo,TimeWin);                 %计算种群目标函数值
    Fitvalue=Fitness(Obj);
    %找出种群中最优个体
    [bestFit_newpop,bestIndex]=max(Fitvalue);
    %将当前代中最优个体与全局最优个体进行比较，如果当前代最优个体更好，则将全局最优个体进行替换
    if bestFit_newpop>=bestFitvalue
        bestIndividual=pop(bestIndex,:);
        bestFitvalue=bestFit_newpop;
    end
%     pop(bestIndex,:)=bestIndividual;
    [best_Obj,best_partRoute]=ObjFunction_coo(bestIndividual,Time_matrix,Power_matrix,Timecost,Powercost,index_coo,num_coo,TimeWin);  

    %轮盘赌选择
    newpop=RouletteSelct(NUM,pop,Fitvalue);
    %交叉
    [Obj,~]=ObjFunction_coo(newpop,Time_matrix,Power_matrix,Timecost,Powercost,index_coo,num_coo,TimeWin);                   %计算种群目标函数值
    Fitvalue=Fitness(Obj);                      %计算每个个体的适应度值
    newpop=cross(newpop,Fitvalue,index_coo,Pc1,Pc2);
%     newpop=elitecross(bestIndividual,newpop,Pc1,Time_matrix,Power_matrix,Timecost,Powercost,index_coo,num_coo,TimeWin);
    %变异
    %先判断是否执行大变异
%     [Obj,~]=ObjFunction_coo(newpop,Time_matrix,Power_matrix,Timecost,Powercost,index_coo,num_coo,TimeWin);       %初始全局最优个体的目标函数值
%     Fitvalue=Fitness(Obj);                        %计算每个个体的适应度值
%     [Maxfitvalue,BestIndex] = max(Fitvalue);      %群体适应度最大值
%     Meanfitvalue = sum(Fitvalue)/NUM;             %群体适应度平均值
%     if alfa * Maxfitvalue < Meanfitvalue && iter < Nlm
%         newpop=LMutate(newpop,Pm3,pSwap,pReversion,pInsertion,BestIndex,index_coo);
%     else
%         newpop=Mutate_adaptive(newpop,Pm1,Pm2,pSwap,pReversion,pInsertion,Fitvalue,Maxfitvalue,Meanfitvalue,index_coo);
%     end
    newpop=Mutate(newpop,Pm2,pSwap,pReversion,pInsertion,index_coo);
    %更新种群
    pop=newpop;
    
    %记录每一代全局最优个体，及其观察量
    BestPop(iter,:)=bestIndividual;
    BestTmax(iter,:)=best_Obj;
    
    %显示每次迭代的最优路线的最优目标函数
    disp(['第' num2str(iter) '次迭代：全局总时间 = ' num2str(best_Obj)]);
    %画出每次迭代的全局最优路线图
%     realroute=[best_partRoute{1,1},best_partRoute{1,2}(2:end),best_partRoute{1,3}(2:end),best_partRoute{1,4}(2:end)];
    realroute=[best_partRoute{1,1}];
    for i=2:NR
        realroute=[realroute,best_partRoute{1,i}(2:end)];
    end
    
    pause(0.01);
    
    if iter>itermax_const
        if BestTmax(iter)==BestTmax(iter-itermax_const)
            break;
        end
    end
    toc
end
%% result
    figure(1);
    plot(x(realroute),y(realroute),'k-o','MarkerSize',10,'MarkerFaceColor','w','LineWidth',1.5);
    xlabel('x');
    ylabel('y');
figure;
plot(x(best_partRoute{1,1}),y(best_partRoute{1,1}),'b-o','MarkerSize',10,'MarkerFaceColor','w','LineWidth',1.5);
hold on
plot(x(best_partRoute{1,2}),y(best_partRoute{1,2}),'r-o','MarkerSize',10,'MarkerFaceColor','w','LineWidth',1.5);
hold on
plot(x(best_partRoute{1,3}),y(best_partRoute{1,3}),'k-o','MarkerSize',10,'MarkerFaceColor','w','LineWidth',1.5);
hold on
plot(x(best_partRoute{1,4}),y(best_partRoute{1,4}),'y-o','MarkerSize',10,'MarkerFaceColor','w','LineWidth',1.5);
hold on
% plot(x(bestIndividual(index_1(5):index_1(6))),y(bestIndividual(index_1(5):index_1(6))),'g-o','MarkerSize',10,'MarkerFaceColor','w','LineWidth',1.5);
% hold on
% plot(x(bestIndividual),y(bestIndividual),'k-o','MarkerSize',10,'MarkerFaceColor','w','LineWidth',1.5);
plot(x(1),y(1),'b*','MarkerSize',10,'LineWidth',2);
%% 打印每次迭代的全局最优个体的时间变化趋势图
figure;
plot(BestTmax,'LineWidth',1);
title('优化过程')
xlabel('迭代次数');
ylabel('最优时间');
toc